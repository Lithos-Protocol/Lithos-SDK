{
  val balanceState = INPUTS(0).R4[AvlTree].get
  val nextStateBox = OUTPUTS(0)
  val nextBalanceState = OUTPUTS(0).R4[AvlTree].get
  val poolNFT = INPUTS(0).tokens(0)._1

  val stateData     = getVar[Coll[(Coll[Byte], Coll[Byte])]](0).get
  val proof         = getVar[Coll[Byte]](1).get



  val ergLiq = SELF.value
  val tokLiq = SELF.tokens(0)._2
  val tokId  = SELF.tokens(0)._1
  val insertProviders = {

      val emptyInserts = stateData.forall{
        (keyVal: (Coll[Byte], Coll[Byte])) =>
          val balance = byteArrayToLong(keyVal._2.slice(0, 8))
          val token = byteArrayToLong(keyVal._2.slice(8, 16))
          val fees = byteArrayToLong(keyVal._2.slice(16, 24))

          balance == ergLiq && token == tokLiq && fees == 0
      }
      val nextState = balanceState.insert(stateData, proof).get
      val validStateTransition = nextBalanceState.digest == nextState.digest
      val secureSpend = poolNFT == const_poolNFT

      val validInsertion = allOf(
        Coll(
          emptyInserts,
          validStateTransition,
          secureSpend,
          nextStateBox.value == INPUTS(0).value + ergLiq
          nextStateBox.tokens(1)._2 == INPUTS(0).tokens(1)._2 + tokLiq
          nextStateBox.tokens(1)._1 == tokId
        )
      )

      validInsertion
  }

  sigmaProp( insertProviders )
}